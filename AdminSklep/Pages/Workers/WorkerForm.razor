@page "/Worker/Form"
@page "/Worker/Form/{WorkerId}"
@using Domain
@using Services.ServiceInterfaces

@inject IWorkerService WorkerService
@inject IOutpostService OutpostService
@inject NavigationManager NavManager

<h3>Worker form</h3>
<EditForm class="p-3" Model="@_workerFormDetails" OnSubmit="@HandleSubmit">
    <div class="mb-3">
        <label class="d-block" for="firstName">First name</label>
        <InputText class="d-block" id="firstName" @bind-Value="_workerFormDetails.FirstName" placeholder="Enter worker first name"></InputText>
    </div>
    <div class="mb-3">
        <label class="d-block" for="lastName">Last name</label>
        <InputText class="d-block" id="lastName" @bind-Value="_workerFormDetails.LastName" placeholder="Enter worker last name"></InputText>
    </div>
    <div class="mb-3">
        <label class="d-block" for="outpost">Outpost</label>
        <InputSelect id="outpost" @bind-Value="_workerFormDetails.OutpostId" class="form-control d-block">
            <option value="@Guid.Empty.ToString()">None</option>
            @foreach (var outpost in OutpostService.GetAll())
            {
                <option value="@outpost.Id.ToString()">@outpost.Name (ID: @outpost.Id)</option>
            }
        </InputSelect>
    </div>
    <div class="mb-2">
        <button class="btn btn-primary" type="submit">Submit</button>
    </div>
</EditForm>



@code {
    [Parameter]
    public string? WorkerId { get; set; }

    private Worker? _worker;
    private WorkerFormDetails _workerFormDetails = new WorkerFormDetails();
    // private List<Outpost> _outposts;

    protected override async Task OnInitializedAsync()
    {
        // _outposts = OutpostService.GetAll();
        
        if (WorkerId == null)
            return;

        _worker = WorkerService.Get(Guid.Parse(WorkerId));
        if(_worker == null)
            return;

        _workerFormDetails.FirstName = _worker.FirstName;
        _workerFormDetails.LastName = _worker.LastName;
        _workerFormDetails.OutpostId = _worker.OutpostId.ToString();
    }

    private void HandleSubmit()
    {
        if (_worker == null)
            HandleCreate();
        else
            HandleEdit();
        NavManager.NavigateTo("/Workers");
    }

    private void HandleEdit()
    {
        if (_worker == null)
            return;
        
        Outpost? outpost = null;
        
        if (_workerFormDetails.OutpostId == null || _workerFormDetails.OutpostId.Equals("null"))
            _worker.OutpostId = Guid.Empty;
        else
        {
            Guid id = Guid.Parse(_workerFormDetails.OutpostId);
            outpost = OutpostService.Get(id);
            // _worker.OutpostId = id;
        }
        
        WorkerService.Edit(_worker.Id,_worker.FirstName,_worker.LastName, outpost);
    }

    private void HandleCreate()
    {
        _worker = Worker.CreateNew(_workerFormDetails.FirstName, _workerFormDetails.LastName);
        Outpost? outpost = null;

        if (_workerFormDetails.OutpostId == null || _workerFormDetails.OutpostId.Equals("null"))
            _worker.OutpostId = Guid.Empty;
        else
        {
            Guid id = Guid.Parse(_workerFormDetails.OutpostId);
            outpost = OutpostService.Get(id);
            // _worker.OutpostId = id;
        }
        
        WorkerService.Add(_worker.FirstName, _worker.LastName, outpost);
    }

    public class WorkerFormDetails
    {
        public string FirstName = "";
        public string LastName = "";
        public string? OutpostId;
    }
}